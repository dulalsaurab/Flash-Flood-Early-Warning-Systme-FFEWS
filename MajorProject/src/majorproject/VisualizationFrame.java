/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package majorproject;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTabbedPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetUtilities;

/**
 *
 * @author suraj
 */
public class VisualizationFrame extends javax.swing.JFrame {

    enum LINETYPE {

        STATIONLINE, LOCATIONLINE, RIVERLINE, YEARLINE, MEANLINE, DAYLINE, DATALINE
    }

    /**
     * Creates new form VisualizationFrame
     */
    public VisualizationFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void createVisualizationFrame() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VisualizationFrame visFrame = new VisualizationFrame();
                visFrame.setVisible(true);
                Number[][] data = new Integer[][]{{new Integer(-3), new Integer(-2)},
                {new Integer(-1), new Integer(1)},
                {new Integer(2), new Integer(3)}};

//                Number[][] data = new Integer[31][12];
//                try {
//                    File inputFile = new File("H:/Projects/MajorProject/majordarafromDHM/New Folder/16/01.txt");
//                    FileReader reader = new FileReader(inputFile);
//                    char[] inputStream = new char[(int) inputFile.length()];
//                    reader.read(inputStream);
//
//                    BufferedReader bufReader = new BufferedReader(reader);
////                    String inputData = new String(inputStream);
//                    String inputData = null;
//                    String station;
//                    String location;
//                    String latitude, longitude, river, year;
//                    inputData = bufReader.readLine();
//                    HashMap<Integer, Number[]> dayDischargeRelation = new HashMap<>();
//                    int count = 0;
////                    int dayCount = 0;
//                    while ((inputData = bufReader.readLine()) != null && inputData.length() != 0) {
////                        String inputData = bufReader.readLine();
//                        String[] inputStringArray = inputData.split(" ", 0);
//                        switch (count) {
//                            case 0:
//                                station = inputStringArray[1];
//                                break;
//                            case 1:
//                                location = inputStringArray[1];
//                                latitude = inputStringArray[3] + "." + inputStringArray[4] + "." + inputStringArray[5];
//                                break;
//                            case 2:
//                                river = inputStringArray[1] + inputStringArray[2];
//                                longitude = inputStringArray[4] + inputStringArray[5] + inputStringArray[6];
//                                break;
//                            case 3:
//
//                                break;
//                            case 4:
//                                year = inputStringArray[1];
//                                break;
//                            case 5:
//                                break;
//                            case 6:
//                                break;
//                            case 7:
//                                break;
//                            case 8:
//                                break;
//                            case 9:
//                                break;
//                            case 41:
//                                break;
//                            case 42:
//                                break;
//                            case 43:
//                                break;
//                            case 44:
//                                break;
//                            default:
//                                int day = Integer.parseInt(inputStringArray[0]);
//                                Number[] dischargeList = new Number[inputStringArray.length];
//                                for (int i = 1; i < inputStringArray.length; i++) {
//                                    dischargeList[i] = Integer.parseInt(inputStringArray[i]);
//                                }
//                                data[day] = dischargeList;
//                                dayDischargeRelation.put(new Integer(day), dischargeList);
//                                break;
//                        }
//
////                        for (String str : inputStringArray) {
////                        }
//                    }
//
//                    System.out.println(data);
////                    FileInputStream inputFileStream = new FileInputStream(inputFile.getCanonicalPath());
////                    byte[] inputStream = new byte[(int) inputFile.length()];
////                    inputFileStream.read(inputStream);
//                } catch (FileNotFoundException ex) {
//                    Logger.getLogger(VisualizationFrame.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (IOException ex) {
//                    Logger.getLogger(VisualizationFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
                CategoryDataset dataset = DatasetUtilities.createCategoryDataset("D",
                        "T", data);
                JFreeChart lineChart = ChartFactory.createLineChart3D("Line Chart", "Time", "Discharge",
                        dataset);
                ChartPanel chartPanel = new ChartPanel(lineChart);
                visFrame.jTabbedPane1.add("LineChart", chartPanel);
//                visFrame.jTabbedPane1.setTitleAt(0,"LineChart");

            }
        });
    }

    private static Number[][] recycle(Double amount, Number[][] data) {
        for (int i = 0; i < 9; i++) {
            data[0][i] = data[0][i + 1];
        }
        data[0][9] = amount;
        return data;
    }

    private void waitSomeTime(double time) {
        long start = System.currentTimeMillis();
        long end = (long) (start + time * 1000); // X seconds * 1000 ms/sec
        while (System.currentTimeMillis() < end) {
        }
    }

    public JTabbedPane getjTabbedPane1() {
        return jTabbedPane1;
    }

    public static void createVisualFrame() throws SQLException, InterruptedException, IOException {
        //TODO: Load database rainfall table
//        Number[][] data = new Integer[20][31];
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    VisualizationFrame visFrame = new VisualizationFrame();
//                    visFrame.setVisible(true);
//                    Connection con = DatabaseConnection.getCon();
//                    Statement stmt = con.createStatement();
//                    ResultSet rslt = stmt.executeQuery("Select * from `rainfall`");
//                    Integer id;
//                    Integer year = 0, day = 0;
//                    Double amount = 0.0;
//                    String place = "";
//                    Number data[][] = new Number[1][10];
//                    ChartPanel chartPanel = new ChartPanel(null);
//                    visFrame.jTabbedPane1.add("LineChart", chartPanel);
//                    try {
//                        while (rslt.next()) {
//                            place = rslt.getString(2);
//                            try {
//                                id = Integer.parseInt(rslt.getString(1));
//                                year = Integer.parseInt(rslt.getString(3));
//                                day = Integer.parseInt(rslt.getString(4));
//                                amount = Double.parseDouble(rslt.getString(5));
//                            } catch (NumberFormatException numberException) {
//                                continue;
//                            }
//                            if (day >= 10) {
//                                data = recycle(amount, data);
//                            } else {
//                                data[0][day] = amount;
//                            }
//                            CategoryDataset dataset = DatasetUtilities.createCategoryDataset("A",
//                                    "D", data);
//                            JFreeChart lineChart = ChartFactory.createLineChart3D("Line Chart", "Time", "Discharge",
//                                    dataset);
//                            
////            ChartPanel chartPanel = new ChartPanel(lineChart);
//                            chartPanel.setChart(lineChart);
//                            visFrame.jTabbedPane1.repaint();
////                            visFrame.waitSomeTime(0.001);
////            Thread.sleep(1000);
////            visFrame.jTabbedPane1.remove(chartPanel);
//
//                        }
//                    } catch (SQLException ex) {
//                        Logger.getLogger(VisualizationFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                } catch (SQLException ex) {
//                    Logger.getLogger(VisualizationFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });

        /////////////////////////////////////////////////////////Creating Line Chart Code//////////////////////////////
//        NewThread visualizationThread = new NewThread();
//        visualizationThread.start();
        /////////////////////////////////////////////////////////End Creating Line Chart Code//////////////////////////
        //
        //
        //
        //
        //
        /////////////////////////////////To expand data to minute resolution///////////////////////////////////////////
//        try {
//
//            Connection con = DatabaseConnection.getCon();
//            Statement stmt = con.createStatement();
//            ResultSet rslt = stmt.executeQuery("Select * from `rainfall`");
//            Integer id;
//            Integer year = 0, day = 0;
//            Double amount = 0.0;
//            String place = "";
////            Number data[][] = new Number[1][100];
////            ChartPanel chartPanel = new ChartPanel(null);
//            File rainFallFile = new File("H:/Projects/MajorProject/majordarafromDHM/data1/rainfall/Rainfall-Chatara00.txt");
//            rainFallFile.createNewFile();
//            FileWriter writer = new FileWriter(rainFallFile);
//            
//            try {
//                while (rslt.next()) {
//                    place = rslt.getString(2);
//                    try {
//                        id = Integer.parseInt(rslt.getString(1));
//                        year = Integer.parseInt(rslt.getString(3));
//                        day = Integer.parseInt(rslt.getString(4));
//                        amount = Double.parseDouble(rslt.getString(5));
//                    } catch (NumberFormatException numberException) {
//                        continue;
//                    }
////                    if (day >= 100) {
////                        data = recycle(amount, data);
////                    } else {
////                        data[0][day] = amount;
////                    }
//                    for(int hour=0;hour<24;hour++){
////                        for(int min=0;min<60;min++){
//                            Double finalData = amount.doubleValue()/(24*60);
//                            String stringData = day.toString()+"\t"+new Integer(hour).toString()+"\t"+new Integer(0).toString()+"\t"+finalData.toString()+"\r\n";
//                            writer.write(stringData);
////                            if(min==59){
////                                writer.close();
////                                System.exit(0);
////                            }
////                            Thread.sleep(1000);
////                        }
//                    }
//                }
//            } catch (SQLException ex) {
//                Logger.getLogger(VisualizationFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(VisualizationFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        //
        //
        /////////////////////////////////To create training data for neural network////////////////////////////////////////////
        Connection con = DatabaseConnection.getCon();
        Statement stmt = con.createStatement();

        ResultSet rslt = stmt.executeQuery("Select `amount`,`Year`,`Day` from `rainfall` where `Place`='Chatara'");
        rslt.last();
//        Double[] rainfall = new Double[rslt.getRow()];
        Double[] rainfall = new Double[3288]; //3288 is the number of days from 2000 to 2008 

        rslt.beforeFirst();
        int rainfallCount = 0;
        Double currentYear = 2000.0;
        Double currentDay = 01.0;
        while (rslt.next()) {
            try {
                if(Double.parseDouble(rslt.getString(2))>2008){
                    continue;
                }
                Double amount = Double.parseDouble(rslt.getString(1));
                rainfall[rainfallCount] = amount;
                rainfallCount++;
            } catch (NumberFormatException numException) {
                continue;
            }
        }

        rslt = stmt.executeQuery("Select `Min`,`Max`,`Year` from `temp`");
        rslt.last();
//        Double[] temperature = new Double[rslt.getRow()];
        Double[] temperature = new Double[3288]; //3288 is the number of days from 2000 to 2008
        rslt.beforeFirst();
        int temperatureCount = 0;
        while (rslt.next()) {
            try {
                if(Double.parseDouble(rslt.getString(3))>2008){
                    continue;
                }
                Double min = Double.parseDouble(rslt.getString(1));
                Double max = Double.parseDouble(rslt.getString(2));
                temperature[temperatureCount] = (min + max) / 2;
                temperatureCount++;
            } catch (NumberFormatException numException) {
                continue;
            }
        }

        rslt = stmt.executeQuery("Select DISTINCT `River`,`Location`,`Station` from `waterdischarge`");
        rslt.last();
        int numOfRivers = rslt.getRow();
        Double[][] dischargeRivers = new Double[numOfRivers][];
        Double[][] outputOfRivers = new Double[rslt.getRow()][];
        rslt.beforeFirst();
        String[] rivers = new String[numOfRivers];
        String[] location = new String[numOfRivers];
        String[] station = new String[numOfRivers];
        int riversCount = 0;
        while (rslt.next()) {
            rivers[riversCount] = rslt.getString(1);
            location[riversCount] = rslt.getString(2);
            station[riversCount] = rslt.getString(3);
            riversCount++;
        }
        int minDischargeCount = 100000;
        
//        for(int i=0;i<numOfRivers;i++){
//            stmt.executeUpdate("INSERT INTO `waterdischarge` (`Station`,`Location`,`River`,`Year`,`Month`,`Day`,`Discharge`) values('"+station[i]+"','"+location[i]+"','"+rivers[i]+"','2004','2','29','0')");
//        }
        
        for (int i = 0; i < numOfRivers; i++) {
            rslt = stmt.executeQuery("Select `Discharge`,`Year`,`Month`,`Day` from `waterdischarge` where `River`='" + rivers[i] + "' && `Location`='" + location[i] + "' ORDER BY `Year`,`Month`");
            rslt.last();
//            Double[] discharge = new Double[rslt.getRow()];   //////////this was to be done but database tori bhako karanle garda direct 4018 use gareko
//            Double[] output = new Double[rslt.getRow()];     //////////this was to be done but database tori bhako karanle garda direct 4018 use gareko
            
//            Double[] discharge = new Double[4018];
//            Double[] output = new Double[4018];
            
            Double[] discharge = new Double[3288];  //3288 is the number of days from 2000 to 2008
            Double[] output = new Double[3288];  //3288 is the number of days from 2000 to 2008
            rslt.beforeFirst();

            int dischargeCount = 0;
            while (rslt.next()) {
                try {
                    Double year = Double.parseDouble(String.valueOf(rslt.getInt(2)));
                    if (year.doubleValue() < 2000 || year.doubleValue() > 2008) {
                        continue;
                    }
                    Double dischargeAmount = Double.parseDouble(rslt.getString(1));
                    discharge[dischargeCount] = dischargeAmount;
                    Double day = Double.parseDouble(rslt.getString(4));
                    Double month = Double.parseDouble(String.valueOf(rslt.getInt(3)));
                    if (year.equals(new Double(2008)) && month.equals(new Double(8)) && day.doubleValue() > 10 && day.doubleValue() < 25) {
                        output[dischargeCount] = new Double(1);
                        System.out.println(dischargeCount+":"+rivers[i]);
//                        System.out.println(rivers[riversCount]);
                    } else {
                        output[dischargeCount] = new Double(0);
                    }
                    dischargeCount++;
                } catch (NumberFormatException numException) {
                    discharge[dischargeCount] = new Double(0);
                    output[dischargeCount] = new Double(0);
                    dischargeCount++;
                    continue;
                }
            }
            if (dischargeCount < minDischargeCount) {
                minDischargeCount = dischargeCount;
            }
            dischargeRivers[i] = discharge;
            outputOfRivers[i] = output;
        }

//        int minDataCount = 0;
//        if (rainfallCount <= temperatureCount && rainfallCount <= minDischargeCount) {
//            minDataCount = rainfallCount;
//        } else if (temperatureCount <= rainfallCount && temperatureCount <= minDischargeCount) {
//            minDataCount = temperatureCount;
//        } else {
//            minDataCount = minDischargeCount;
//        }
        
        int minDataCount = 3288; //////There are 4018 days from 2000 to 2010// Calculating from our jpt database is not possible, tesaile direct lekheko

        for (int riverCount = 0; riverCount < numOfRivers; riverCount++) {
            File file = new File("H:/Projects/MajorProject/NNDATA/" + rivers[riverCount] + location[riverCount] + "-NNinput.txt");
            file.createNewFile();
            FileWriter writer = new FileWriter(file);
            for (int i = 0; i < minDataCount; i++) {
                if(rainfall[i]==null){
                    rainfall[i]=0.0;
                }
                if(temperature[i]==null){
                    temperature[i]=0.0;
                }
                if(dischargeRivers[riverCount][i]==null){
                    dischargeRivers[riverCount][i]=0.0;
                }
                if(outputOfRivers[riverCount][i]==null){
                    outputOfRivers[riverCount][i]=0.0;
                }
                String row = String.valueOf(i)+"\t"+rainfall[i].toString() + "\t" + temperature[i].toString() + "\t" + dischargeRivers[riverCount][i].toString() + "\t" + outputOfRivers[riverCount][i].toString() + "\r\n";
                writer.write(row);
            }
            writer.close();
        }
        System.exit(0);

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
